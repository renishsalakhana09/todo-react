{"version":3,"sources":["components/notification/index.js","components/todoList/index.js","components/addTodo/index.js","containers/todoContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["emitter","EventEmitter","Notification","useState","open","setOpen","message","setMessage","notificationStyle","padding","position","border","bottom","zIndex","display","justifyContent","alignItems","height","width","float","backgroundColor","color","transition","opacity","visibility","reset","autoHideAfterTimeout","setTimeout","addListener","msg","Math","random","style","Todo","todo","removeTodo","handleChange","type","margin","checked","done","onChange","id","emit","title","textDecoration","borderRadius","cursor","textAlign","fontWeight","marginLeft","outline","onClick","AddTodo","addTodo","setTitle","top","className","onSubmit","e","preventDefault","newTodo","value","target","placeholder","marginTop","marginBottom","boxSizing","fontSize","boxShadow","required","borderColor","todoList","TodoContainer","todos","setTodos","handleRemoveTodo","newTodoList","filter","localStorage","setItem","JSON","stringify","hanldeCheckboxChange","map","align","textDecorationColor","length","t","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8RAGaA,EAAU,I,MAAIC,cA8DZC,EA5DM,WAAO,IAAD,EACDC,oBAAS,GADR,mBAClBC,EADkB,KACZC,EADY,OAGKF,qBAHL,mBAGlBG,EAHkB,KAGTC,EAHS,KAKnBC,EAAoB,CACxBC,QAAS,GACTC,SAAU,QACVC,OAAQ,kBACRC,OAAQ,EACRC,OAAQ,IACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,GACRC,MAAO,OACPC,MAAO,OACPC,gBAAiB,MACjBC,MAAO,QACPC,WAAY,uBACZC,QAASnB,EAAO,EAAI,EACpBoB,WAAYpB,EAAO,UAAY,UAE3BqB,EAAQ,WACZpB,GAAQ,IAEJqB,EAAuB,WAC3BC,YAAW,kBAAMF,MAAS,MAiB5B,OAfAzB,EAAQ4B,YAAY,gBAAgB,SAACC,GACnCtB,EACEsB,GACE,eACkB,IAAhBC,KAAKC,SADP,8BASJ1B,GAAQ,GACRqB,OAGCtB,GACAE,GACAE,GACAiB,GACAC,EAKD,yBAAKM,MAAOxB,GACV,8BAAOF,IAJF,MC4CI2B,EAjGF,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAoDhC,OACE,6BACE,2BACEC,KAAK,WACLL,MAAO,CAAEM,OAAQ,UACjBC,QAASL,EAAKM,KAEdC,SAAU,kBAA2BP,EAAKQ,GAzDzCR,EAAKM,KAGRxC,EAAQ2C,KACN,eADF,WAEMT,EAAKU,MAFX,oCAFA5C,EAAQ2C,KAAK,eAAb,WAAiCT,EAAKU,MAAtC,+BAOFR,EAAaF,EAAKQ,OAmDhB,0BACEV,MAAO,CACLa,eAAgBX,EAAKM,KAAO,eAAiB,OAE7CnB,MAAOa,EAAKM,KAAO,QAAU,UAG9BN,EAAKU,OAER,4BACEZ,MAAO,CACLb,MAAO,QACPC,gBAAiB,MACjBC,MAAO,QACPV,OAAQ,OACRmC,aAAc,MACdC,OAAQ,UACRjC,QAAS,eACTkC,UAAW,SACXC,WAAY,OACZC,WAAY,OACZ5B,WAAY,uBACZ6B,QAAS,QAEXC,QAAS,kBAAMjB,GAAcA,EAAWD,EAAKQ,MAf/C,OCASW,G,MAtEC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAOLnD,qBAPK,mBAOxByC,EAPwB,KAOjBW,EAPiB,KAe/B,OACE,yBAAKvB,MAfc,CACnBtB,SAAU,QACV8C,IAAK,EACL1C,QAAS,QACTI,MAAO,QAWmBuC,UAAU,aAClC,yBAAKf,GAAG,WACN,0BAAMgB,SAVS,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAU,CAAEnB,GAAIZ,KAAKC,SAAUa,MAAOA,EAAOJ,MAAM,GACzDc,EAAQO,GACR7D,EAAQ2C,KAAK,eAAb,WAAiCC,EAAjC,iCACAW,EAAS,MAMH,2BACElB,KAAK,OACLyB,MAAOlB,EACPH,SAAU,SAACkB,GAAD,OAAOJ,EAASI,EAAEI,OAAOD,QACnCE,YAAY,6BACZhC,MAAO,CACLd,MAAO,MACP+C,UAAW,OACXC,aAAc,OACd5B,OAAQ,YACR7B,QAAS,OACTE,OAAQ,iBACRwD,UAAW,aACXlD,OAAQ,GACR6B,aAAc,EACdsB,SAAU,GACVjB,QAAS,OACT9B,MAAO,OACPgD,UAAW,4BACX/C,WAAY,wBAEdgD,UAAQ,IAEV,2BACEjC,KAAK,SACLyB,MAAO,WACP9B,MAAO,CACLd,MAAO,GACPsC,IAAK,EAELvC,OAAQ,GACRoD,UAAW,aACXE,YAAa,QACbxD,eAAgB,SAChBC,WAAY,SACZI,gBAAiB,UACjBC,MAAO,QACPyB,aAAc,EACdrC,QAAS,GACT2D,SAAU,GACVjB,QAAS,OACTJ,OAAQ,UACRzB,WAAY,+BC3DpBkD,EAAW,GAwIFC,EAtIO,WAAO,IAAD,EACAtE,mBAASqE,GADT,mBACnBE,EADmB,KACZC,EADY,KAWpBC,EAAmB,SAAClC,GACxB,IAAMmC,EAAcH,EAAMI,QAAO,SAAC5C,GAAD,OAAUA,EAAKQ,KAAOA,KACvDqC,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,IAE7CF,EAASE,IAELM,EAAuB,SAACzC,GAC5B,IAAMmC,EAAcH,EAAMU,KAAI,SAAClD,GAC7B,OAAIA,EAAKQ,KAAOA,EAAW,2BAAKR,GAAZ,IAAkBM,MAAON,EAAKM,OAC3CN,KAETyC,EAASE,IAGX,OACE,yBAAK7C,MAAO,CAAEM,OAAQ,KACpB,wBAAI+C,MAAM,UAAV,SACA,kBAAC,EAAD,MACA,6BACA,wBACEA,MAAM,SACNrD,MAAO,CACLX,MAAO,OACPiE,oBAAqB,OACrBlB,SAAU,GACVlD,MAAO,MACPD,OAAQ,OACRqB,OAAQ,OACRW,WAAY,OACZH,aAAc,kBACdnC,OAAQ,kBACRS,gBAAiB,YACjBJ,WAAY,SACZD,eAAgB,SAChBiC,UAAW,SACXvC,QAAS,OACTsC,OAAQ,YAjBZ,sBAsBC2B,EAAMa,OAAS,EACdb,EACGI,QAAO,SAACU,GAAD,OAAkB,IAAXA,EAAEhD,QAChB4C,KAAI,SAAClD,GAAD,OACH,kBAAC,EAAD,CACEA,KACEA,GAAQ,CAAEU,MAAO,eAAkB,CAAEJ,MAAM,IAAW,CAAEE,GAAI,GAE9D+C,IACEvD,EAAKQ,GAAKR,EAAKU,MAAQV,EAAKM,KAAON,EAAKQ,GAAqB,IAAhBZ,KAAKC,SAEpDI,WAAYyC,GAAoB,KAChCxC,aAAc+C,GAAwB,UAI5C,uBAAGE,MAAM,SAASrD,MAAO,CAAEX,MAAO,MAAO+C,SAAU,SAAnD,8BAIF,6BAEA,wBACEiB,MAAM,SACNrD,MAAO,CACLX,MAAO,OACPiE,oBAAqB,OACrBlB,SAAU,GACVlD,MAAO,MACPD,OAAQ,OACRqB,OAAQ,OACRW,WAAY,OACZH,aAAc,kBACdnC,OAAQ,kBACRS,gBAAiB,YACjBJ,WAAY,SACZD,eAAgB,SAChBiC,UAAW,SACXvC,QAAS,OACTsC,OAAQ,YAjBZ,oBAsBC2B,EAAMI,QAAO,SAACU,GAAD,OAAkB,IAAXA,EAAEhD,QAAe+C,OAAS,EAC7Cb,EAEGI,QAAO,SAACU,GAAD,OAAkB,IAAXA,EAAEhD,QAChB4C,KAAI,SAAClD,GAAD,OACH,kBAAC,EAAD,CACEA,KAAMA,EACNuD,IAAKvD,EAAKQ,GACVP,WAAYyC,EACZxC,aAAc+C,OAIpB,uBACEE,MAAM,SACNrD,MAAO,CACLX,MAAO,MACP+C,SAAU,OACVlD,MAAO,MACPD,OAAQ,OACRqB,OAAQ,OACRtB,WAAY,SACZD,eAAgB,SAChBiC,UAAW,SACXvC,QAAS,OACTsC,OAAQ,YAZZ,yBAeyB,KAG3B,kBAAC,EAAD,CAASO,QA5HS,SAACO,GACrBc,EAAS,GAAD,mBAAKD,GAAL,CAAYb,KAEpB,IAAMgB,EAAW,sBAAOH,GAAP,CAAcb,IAC/BkB,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,IAE7CF,EAASE,MAwHP,+BC5HSa,MARf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,QCKckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtG,c","file":"static/js/main.696716df.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { EventEmitter } from \"fbemitter\";\n\nexport const emitter = new EventEmitter();\n\nconst Notification = () => {\n  const [open, setOpen] = useState(false);\n\n  const [message, setMessage] = useState();\n\n  const notificationStyle = {\n    padding: 10,\n    position: \"fixed\",\n    border: \"1px green solid\",\n    bottom: 0,\n    zIndex: 1000,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: 20,\n    width: \"100%\",\n    float: \"left\",\n    backgroundColor: \"red\",\n    color: \"white\",\n    transition: \"all 0.3s ease-in-out\",\n    opacity: open ? 1 : 0,\n    visibility: open ? \"visible\" : \"hidden\",\n  };\n  const reset = () => {\n    setOpen(false);\n  };\n  const autoHideAfterTimeout = () => {\n    setTimeout(() => reset(), 10000);\n  };\n  emitter.addListener(\"NOTIFICATION\", (msg) => {\n    setMessage(\n      msg ||\n        \"Notification\" +\n          Math.random() * 100 +\n          1 +\n          \" is added\" +\n          \" successfully\" +\n          \"!\" +\n          \"!\" +\n          \"!\"\n    );\n    setOpen(true || false);\n    autoHideAfterTimeout();\n  });\n  if (\n    !open &&\n    !message &&\n    !notificationStyle &&\n    !reset &&\n    !autoHideAfterTimeout\n  ) {\n    return null;\n  }\n  return (\n    <div style={notificationStyle}>\n      <span>{message}</span>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React from \"react\";\nimport { emitter } from \"../notification\";\n\nconst Todo = ({ todo, removeTodo, handleChange }) => {\n  const hanldeCheckboxChange = () => {\n    if (!todo.done) {\n      emitter.emit(\"NOTIFICATION\", `\"${todo.title}\" task is a completed`);\n    } else {\n      emitter.emit(\n        \"NOTIFICATION\",\n        `\"${todo.title}\" task is become an incompleted`\n      );\n    }\n    handleChange(todo.id);\n  };\n\n  // const markAsComplete = ({ completed, incompleted }) => {\n  //   if (completed) {\n  //     return (\n  //       <span\n  //         style={{\n  //           color: \"green\",\n  //           fontWeight: \"bold\",\n  //           fontSize: 12,\n  //           marginLeft: 10,\n  //         }}\n  //       >\n  //         <span role=\"img\" aria-label=\"check\">\n  //           {\" \"}\n  //           ✔️ completed\n  //         </span>\n  //       </span>\n  //     );\n  //   }\n  //   if (incompleted) {\n  //     return (\n  //       <span\n  //         style={{\n  //           color: \"red\",\n\n  //           fontWeight: \"bold\",\n\n  //           fontSize: 12,\n  //           marginLeft: 10,\n  //         }}\n  //       >\n  //         <span role=\"img\" aria-label=\"check\">\n  //           {\" \"}\n  //           ❌ incompleted\n  //         </span>\n  //       </span>\n  //     );\n  //   }\n  // };\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        style={{ margin: \"0 10px\" }}\n        checked={todo.done}\n        // onChange={todo.done ? null : hanldeCheckboxChange}\n        onChange={() => hanldeCheckboxChange(todo.id || null)}\n      />\n      <span\n        style={{\n          textDecoration: todo.done ? \"line-through\" : \"none\",\n\n          color: todo.done ? \"green\" : \"black\",\n        }}\n      >\n        {todo.title}\n      </span>\n      <button\n        style={{\n          float: \"right\",\n          backgroundColor: \"red\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\",\n          display: \"inline-block\",\n          textAlign: \"center\",\n          fontWeight: \"bold\",\n          marginLeft: \"10px\",\n          transition: \"all 0.3s ease-in-out\",\n          outline: \"none\",\n        }}\n        onClick={() => removeTodo && removeTodo(todo.id)}\n      >\n        X\n      </button>\n\n      {/* {markAsComplete({\n        completed: todo.done === true,\n        incompleted: !todo.done,\n      })} */}\n    </div>\n  );\n};\nexport default Todo;\n","import React, { useState } from \"react\";\nimport { emitter } from \"../notification\";\nimport \"./index.css\";\nconst AddTodo = ({ addTodo }) => {\n  const addTodoStyle = {\n    position: \"fixed\",\n    top: 0,\n    display: \"block\",\n    width: \"100%\",\n  };\n  const [title, setTitle] = useState();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newTodo = { id: Math.random(), title: title, done: false };\n    addTodo(newTodo);\n    emitter.emit(\"NOTIFICATION\", `\"${title}\" task is added successfully`);\n    setTitle(\"\");\n  };\n  return (\n    <div style={addTodoStyle} className=\"container\">\n      <div id=\"newtask\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            placeholder=\"What's the plan for today?\"\n            style={{\n              width: \"90%\",\n              marginTop: \"10px\",\n              marginBottom: \"10px\",\n              margin: \"10px 10px\",\n              padding: \"10px\",\n              border: \"1px solid #ccc\",\n              boxSizing: \"border-box\",\n              height: 40,\n              borderRadius: 5,\n              fontSize: 16,\n              outline: \"none\",\n              color: \"#333\",\n              boxShadow: \"0 1px 2px rgba(0,0,0,0.1)\",\n              transition: \"all 0.3s ease-in-out\",\n            }}\n            required\n          />\n          <input\n            type=\"submit\"\n            value={\"Add Todo\"}\n            style={{\n              width: 90,\n              top: 0,\n\n              height: 40,\n              boxShadow: \"0 9px #999\",\n              borderColor: \"black\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              backgroundColor: \"#4CAF50\",\n              color: \"white\",\n              borderRadius: 5,\n              padding: 10,\n              fontSize: 16,\n              outline: \"none\",\n              cursor: \"pointer\",\n              transition: \"all 0.3s ease-in-out\",\n            }}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React, { useState } from \"react\";\nimport Todo from \"../../components/todoList\";\nimport AddTodo from \"../../components/addTodo\";\nimport Notification from \"../../components/notification\";\n\nconst todoList = [];\n\nconst TodoContainer = () => {\n  const [todos, setTodos] = useState(todoList);\n\n  const handleAddTodo = (newTodo) => {\n    setTodos([...todos, newTodo]);\n\n    const newTodoList = [...todos, newTodo];\n    localStorage.setItem(\"todos\", JSON.stringify(newTodoList));\n\n    setTodos(newTodoList);\n  };\n  const handleRemoveTodo = (id) => {\n    const newTodoList = todos.filter((todo) => todo.id !== id);\n    localStorage.setItem(\"todos\", JSON.stringify(newTodoList));\n\n    setTodos(newTodoList);\n  };\n  const hanldeCheckboxChange = (id) => {\n    const newTodoList = todos.map((todo) => {\n      if (todo.id === id) return { ...todo, done: !todo.done };\n      return todo;\n    });\n    setTodos(newTodoList);\n  };\n\n  return (\n    <div style={{ margin: 20 }}>\n      <h4 align=\"center\">hello</h4>\n      <Notification />\n      <hr></hr>\n      <h4\n        align=\"center\"\n        style={{\n          color: \"blue\",\n          textDecorationColor: \"blue\",\n          fontSize: 20,\n          width: \"15%\",\n          height: \"auto\",\n          margin: \"auto\",\n          fontWeight: \"bold\",\n          borderRadius: \"2px solid black\",\n          border: \"2px solid black\",\n          backgroundColor: \"lightblue\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          padding: \"10px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Todo's Incompleted\n      </h4>\n      {todos.length > 0 ? (\n        todos\n          .filter((t) => t.done === false)\n          .map((todo) => (\n            <Todo\n              todo={\n                todo || { title: \"loading...\" } || { done: false } || { id: 0 }\n              }\n              key={\n                todo.id + todo.title + todo.done + todo.id + Math.random() * 100\n              } // key={todo.id}}\n              removeTodo={handleRemoveTodo || null} // if removeTodo is null, then it will not be passed to the child component\n              handleChange={hanldeCheckboxChange || null} // if handleChange is null, then it will not be passed to the child component\n            />\n          ))\n      ) : (\n        <p align=\"center\" style={{ color: \"red\", fontSize: \"18px\" }}>\n          No todo left. may add one?\n        </p>\n      )}\n      <hr />\n\n      <h4\n        align=\"center\"\n        style={{\n          color: \"blue\",\n          textDecorationColor: \"blue\",\n          fontSize: 20,\n          width: \"15%\",\n          height: \"auto\",\n          margin: \"auto\",\n          fontWeight: \"bold\",\n          borderRadius: \"2px solid black\",\n          border: \"2px solid black\",\n          backgroundColor: \"lightblue\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          padding: \"10px\",\n          cursor: \"pointer\",\n        }}\n      >\n        Todo's completed\n      </h4>\n      {todos.filter((t) => t.done === true).length > 0 ? (\n        todos\n\n          .filter((t) => t.done === true)\n          .map((todo) => (\n            <Todo\n              todo={todo}\n              key={todo.id}\n              removeTodo={handleRemoveTodo}\n              handleChange={hanldeCheckboxChange}\n            />\n          ))\n      ) : (\n        <p\n          align=\"center\"\n          style={{\n            color: \"red\",\n            fontSize: \"18px\",\n            width: \"15%\",\n            height: \"auto\",\n            margin: \"auto\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            textAlign: \"center\",\n            padding: \"10px\",\n            cursor: \"pointer\",\n          }}\n        >\n          No completed todos yet{\" \"}\n        </p>\n      )}\n      <AddTodo addTodo={handleAddTodo} />\n\n      <hr />\n    </div>\n  );\n};\n\nexport default TodoContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoContainer from \"./containers/todoContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\nserviceWorker.unregister();\n"],"sourceRoot":""}